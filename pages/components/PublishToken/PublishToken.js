import React, { useContext, useEffect, useState } from 'react';
import styles from './PublishToken.module.css';
import { InboxOutlined, UploadOutlined } from '@ant-design/icons';
import { Button, Form, Input, Radio, Switch, Upload, Select, Modal, InputNumber, Divider } from 'antd';
const fetch = require("node-fetch");
import BN from 'bn.js'
const bs58 = require("bs58");
const axios = require('axios');
import { AccountContext } from '../../../context/context'
import { useConnectWallet } from '@web3-onboard/react'
import Web3 from 'web3';
import { ethers } from 'ethers';
const { TextArea } = Input;
const FormData = require('form-data');

const sleep = (time) => {
    return new Promise(resolve => setTimeout(resolve, time))
}
const PublishToken = () => {
    const [form] = Form.useForm();
    const [formLayout, setFormLayout] = useState('vertical');
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isModalOpen1, setIsModalOpen1] = useState(false);

    const [isPermit, setIsPermit] = useState(false);
    const [isMint, setIsMint] = useState(false);
    const [isBurn, setIsBurn] = useState(false);

    const [templateList, setTemplateList] = useState([]);
    const [currentTempId, setCurrentTempId] = useState(-1);
    const [saveTemplateName, setSaveTemplateName] = useState([]);
    const [currentPicUrl, setCurrentPicUrl] = useState('');
    const [message, setMessage] = useState('');
    const [tokenID, setTokenID] = useState('');
    const [tokenAddress, setTokenAddress] = useState('');
    const [multipleToken, setMultipleToken] = useState(false);
    const [selectedTemplateList, setSelectedTemplateList] = useState([]);
    const [isCollapse, setIsCollapse] = useState(true);
    // const { account, web3 } = useContext(AccountContext);
    const [
        {
            wallet, // the wallet that has been connected or null if not yet connected
            connecting // boolean indicating if connection is in progress
        },
    ] = useConnectWallet()
    const onSubmit = async (e) => {

        if (!wallet) {
            alert("请连接钱包");
            return;
        }

        if (multipleToken) {
            // 批量发布
            for (let i = 0; i < selectedTemplateList.length; i++) {
                const template = templateList[selectedTemplateList[i]];
                if (template.name == '' || template.nameoc == ''
                    || template.symboloc == '' || template.symbol == ''
                    || template.decimals == '' || template.supplies == ''
                    || template.picurl == ''
                ) {
                    alert(template.template_name + "信息不全");
                    return;
                }
                if (template.meta_url == '' || template.meta_url == undefined
                ) {
                    alert(template.template_name + "元数据没生成");
                    return;
                }
            }
            for (let i = 0; i < selectedTemplateList.length; i++) {
                const template = templateList[selectedTemplateList[i]];
                setCurrentPicUrl(template.picurl);
                form.setFieldsValue(template);
                await publishTokenLogic(template);
            }
            alert('批量发币成功');
            return;
        }
        await publishTokenLogic(null);
    };
    async function publishTokenLogic(template) {

        const tokenInfo = await form.validateFields();
        tokenInfo.pub_count = 1;
        tokenInfo.publish_addr = wallet.accounts[0].address;
        tokenInfo.tabs = "";
        tokenInfo.is_freeze_auth = 0;
        tokenInfo.is_mint_auth = 0;
        tokenInfo.is_update_auth = 0;
        tokenInfo.nameoc = tokenInfo.name;
        tokenInfo.symboloc = tokenInfo.symbol;
        tokenInfo.description = "";
        tokenInfo.picurl = "";

        console.log("sinboss token info", tokenInfo);
        try {

            setMessage(message + "\n发币中");
            // const abi = [{ "inputs": [{ "internalType": "string", "name": "name", "type": "string" }, { "internalType": "string", "name": "symbol", "type": "string" }, { "internalType": "uint8", "name": "decimals_", "type": "uint8" }, { "internalType": "uint256", "name": "initialSupply", "type": "uint256" }, { "internalType": "address", "name": "tokenOwner", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" }, { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "sender", "type": "address" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }];
            const abi = [{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals_","type":"uint8"},{"internalType":"uint256","name":"initialSupply","type":"uint256"},{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}];
            // const bytecode = "0x608060405234801561000f575f5ffd5b5060405161238b38038061238b833981810160405281019061003191906105d5565b8484846100506100456100cf60201b60201c565b6100d660201b60201c565b826004908161005f919061088b565b50816005908161006f919061088b565b508060065f6101000a81548160ff021916908360ff1602179055505050506100b7818460ff16600a6100a19190610ab6565b846100ac9190610b00565b61019760201b60201c565b6100c56102fb60201b60201c565b5050505050610c7c565b5f33905090565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90610b9b565b60405180910390fd5b6102165f838361039460201b60201c565b8060035f8282546102279190610bb9565b925050819055508060015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461027a9190610bb9565b925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516102de9190610bfb565b60405180910390a36102f75f838361039960201b60201c565b5050565b6103096100cf60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1661032d61039e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614610383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037a90610c5e565b60405180910390fd5b6103925f6100d660201b60201c565b565b505050565b505050565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610424826103de565b810181811067ffffffffffffffff82111715610443576104426103ee565b5b80604052505050565b5f6104556103c5565b9050610461828261041b565b919050565b5f67ffffffffffffffff8211156104805761047f6103ee565b5b610489826103de565b9050602081019050919050565b8281835e5f83830152505050565b5f6104b66104b184610466565b61044c565b9050828152602081018484840111156104d2576104d16103da565b5b6104dd848285610496565b509392505050565b5f82601f8301126104f9576104f86103d6565b5b81516105098482602086016104a4565b91505092915050565b5f60ff82169050919050565b61052781610512565b8114610531575f5ffd5b50565b5f815190506105428161051e565b92915050565b5f819050919050565b61055a81610548565b8114610564575f5ffd5b50565b5f8151905061057581610551565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6105a48261057b565b9050919050565b6105b48161059a565b81146105be575f5ffd5b50565b5f815190506105cf816105ab565b92915050565b5f5f5f5f5f60a086880312156105ee576105ed6103ce565b5b5f86015167ffffffffffffffff81111561060b5761060a6103d2565b5b610617888289016104e5565b955050602086015167ffffffffffffffff811115610638576106376103d2565b5b610644888289016104e5565b945050604061065588828901610534565b935050606061066688828901610567565b9250506080610677888289016105c1565b9150509295509295909350565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806106d257607f821691505b6020821081036106e5576106e461068e565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026107477fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261070c565b610751868361070c565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61078c61078761078284610548565b610769565b610548565b9050919050565b5f819050919050565b6107a583610772565b6107b96107b182610793565b848454610718565b825550505050565b5f5f905090565b6107d06107c1565b6107db81848461079c565b505050565b5b818110156107fe576107f35f826107c8565b6001810190506107e1565b5050565b601f82111561084357610814816106eb565b61081d846106fd565b8101602085101561082c578190505b610840610838856106fd565b8301826107e0565b50505b505050565b5f82821c905092915050565b5f6108635f1984600802610848565b1980831691505092915050565b5f61087b8383610854565b9150826002028217905092915050565b61089482610684565b67ffffffffffffffff8111156108ad576108ac6103ee565b5b6108b782546106bb565b6108c2828285610802565b5f60209050601f8311600181146108f3575f84156108e1578287015190505b6108eb8582610870565b865550610952565b601f198416610901866106eb565b5f5b8281101561092857848901518255600182019150602085019450602081019050610903565b868310156109455784890151610941601f891682610854565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f5f8291508390505b60018511156109dc578086048111156109b8576109b761095a565b5b60018516156109c75780820291505b80810290506109d585610987565b945061099c565b94509492505050565b5f826109f45760019050610aaf565b81610a01575f9050610aaf565b8160018114610a175760028114610a2157610a50565b6001915050610aaf565b60ff841115610a3357610a3261095a565b5b8360020a915084821115610a4a57610a4961095a565b5b50610aaf565b5060208310610133831016604e8410600b8410161715610a855782820a905083811115610a8057610a7f61095a565b5b610aaf565b610a928484846001610993565b92509050818404811115610aa957610aa861095a565b5b81810290505b9392505050565b5f610ac082610548565b9150610acb83610548565b9250610af87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846109e5565b905092915050565b5f610b0a82610548565b9150610b1583610548565b9250828202610b2381610548565b91508282048414831517610b3a57610b3961095a565b5b5092915050565b5f82825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f610b85601f83610b41565b9150610b9082610b51565b602082019050919050565b5f6020820190508181035f830152610bb281610b79565b9050919050565b5f610bc382610548565b9150610bce83610548565b9250828201905080821115610be657610be561095a565b5b92915050565b610bf581610548565b82525050565b5f602082019050610c0e5f830184610bec565b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f610c48602083610b41565b9150610c5382610c14565b602082019050919050565b5f6020820190508181035f830152610c7581610c3c565b9050919050565b61170280610c895f395ff3fe608060405234801561000f575f5ffd5b50600436106100e8575f3560e01c8063715018a61161008a578063a457c2d711610064578063a457c2d71461024c578063a9059cbb1461027c578063dd62ed3e146102ac578063f2fde38b146102dc576100e8565b8063715018a6146102065780638da5cb5b1461021057806395d89b411461022e576100e8565b806323b872dd116100c657806323b872dd14610158578063313ce5671461018857806339509351146101a657806370a08231146101d6576100e8565b806306fdde03146100ec578063095ea7b31461010a57806318160ddd1461013a575b5f5ffd5b6100f46102f8565b6040516101019190610ed8565b60405180910390f35b610124600480360381019061011f9190610f89565b610388565b6040516101319190610fe1565b60405180910390f35b6101426103a5565b60405161014f9190611009565b60405180910390f35b610172600480360381019061016d9190611022565b6103ae565b60405161017f9190610fe1565b60405180910390f35b6101906104a0565b60405161019d919061108d565b60405180910390f35b6101c060048036038101906101bb9190610f89565b6104b5565b6040516101cd9190610fe1565b60405180910390f35b6101f060048036038101906101eb91906110a6565b61055c565b6040516101fd9190611009565b60405180910390f35b61020e6105a2565b005b610218610629565b60405161022591906110e0565b60405180910390f35b610236610650565b6040516102439190610ed8565b60405180910390f35b61026660048036038101906102619190610f89565b6106e0565b6040516102739190610fe1565b60405180910390f35b61029660048036038101906102919190610f89565b6107c6565b6040516102a39190610fe1565b60405180910390f35b6102c660048036038101906102c191906110f9565b6107e3565b6040516102d39190611009565b60405180910390f35b6102f660048036038101906102f191906110a6565b610865565b005b60606004805461030790611164565b80601f016020809104026020016040519081016040528092919081815260200182805461033390611164565b801561037e5780601f106103555761010080835404028352916020019161037e565b820191905f5260205f20905b81548152906001019060200180831161036157829003601f168201915b5050505050905090565b5f61039b61039461095b565b8484610962565b6001905092915050565b5f600354905090565b5f6103ba848484610b25565b5f60025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f61040161095b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047790611204565b60405180910390fd5b6104948561048c61095b565b858403610962565b60019150509392505050565b5f60065f9054906101000a900460ff16905090565b5f6105526104c161095b565b848460025f6104ce61095b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461054d919061124f565b610962565b6001905092915050565b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6105aa61095b565b73ffffffffffffffffffffffffffffffffffffffff166105c8610629565b73ffffffffffffffffffffffffffffffffffffffff161461061e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610615906112cc565b60405180910390fd5b6106275f610d9d565b565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606005805461065f90611164565b80601f016020809104026020016040519081016040528092919081815260200182805461068b90611164565b80156106d65780601f106106ad576101008083540402835291602001916106d6565b820191905f5260205f20905b8154815290600101906020018083116106b957829003601f168201915b5050505050905090565b5f5f60025f6106ed61095b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050828110156107a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079e9061135a565b60405180910390fd5b6107bb6107b261095b565b85858403610962565b600191505092915050565b5f6107d96107d261095b565b8484610b25565b6001905092915050565b5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b61086d61095b565b73ffffffffffffffffffffffffffffffffffffffff1661088b610629565b73ffffffffffffffffffffffffffffffffffffffff16146108e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d8906112cc565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361094f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610946906113e8565b60405180910390fd5b61095881610d9d565b50565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c790611476565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3590611504565b60405180910390fd5b8060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610b189190611009565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8a90611592565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf890611620565b60405180910390fd5b610c0c838383610e5e565b5f60015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c87906116ae565b60405180910390fd5b81810360015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508160015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610d20919061124f565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d849190611009565b60405180910390a3610d97848484610e63565b50505050565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610eaa82610e68565b610eb48185610e72565b9350610ec4818560208601610e82565b610ecd81610e90565b840191505092915050565b5f6020820190508181035f830152610ef08184610ea0565b905092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610f2582610efc565b9050919050565b610f3581610f1b565b8114610f3f575f5ffd5b50565b5f81359050610f5081610f2c565b92915050565b5f819050919050565b610f6881610f56565b8114610f72575f5ffd5b50565b5f81359050610f8381610f5f565b92915050565b5f5f60408385031215610f9f57610f9e610ef8565b5b5f610fac85828601610f42565b9250506020610fbd85828601610f75565b9150509250929050565b5f8115159050919050565b610fdb81610fc7565b82525050565b5f602082019050610ff45f830184610fd2565b92915050565b61100381610f56565b82525050565b5f60208201905061101c5f830184610ffa565b92915050565b5f5f5f6060848603121561103957611038610ef8565b5b5f61104686828701610f42565b935050602061105786828701610f42565b925050604061106886828701610f75565b9150509250925092565b5f60ff82169050919050565b61108781611072565b82525050565b5f6020820190506110a05f83018461107e565b92915050565b5f602082840312156110bb576110ba610ef8565b5b5f6110c884828501610f42565b91505092915050565b6110da81610f1b565b82525050565b5f6020820190506110f35f8301846110d1565b92915050565b5f5f6040838503121561110f5761110e610ef8565b5b5f61111c85828601610f42565b925050602061112d85828601610f42565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061117b57607f821691505b60208210810361118e5761118d611137565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320615f8201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b5f6111ee602883610e72565b91506111f982611194565b604082019050919050565b5f6020820190508181035f83015261121b816111e2565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61125982610f56565b915061126483610f56565b925082820190508082111561127c5761127b611222565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f6112b6602083610e72565b91506112c182611282565b602082019050919050565b5f6020820190508181035f8301526112e3816112aa565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f611344602583610e72565b915061134f826112ea565b604082019050919050565b5f6020820190508181035f83015261137181611338565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f6113d2602683610e72565b91506113dd82611378565b604082019050919050565b5f6020820190508181035f8301526113ff816113c6565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f611460602483610e72565b915061146b82611406565b604082019050919050565b5f6020820190508181035f83015261148d81611454565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f6114ee602283610e72565b91506114f982611494565b604082019050919050565b5f6020820190508181035f83015261151b816114e2565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f61157c602583610e72565b915061158782611522565b604082019050919050565b5f6020820190508181035f8301526115a981611570565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f61160a602383610e72565b9150611615826115b0565b604082019050919050565b5f6020820190508181035f830152611637816115fe565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f611698602683610e72565b91506116a38261163e565b604082019050919050565b5f6020820190508181035f8301526116c58161168c565b905091905056fea264697066735822122029c2ebc2f9592ca408c946accfce3c35aa669f152451e4f0ee24755f61ecf3bf64736f6c634300081c0033";
            const bytecode = "608060405234801561000f575f80fd5b50604051612388380380612388833981810160405281019061003191906105d5565b8484846100506100456100cf60201b60201c565b6100d660201b60201c565b826004908161005f9190610888565b50816005908161006f9190610888565b508060065f6101000a81548160ff021916908360ff1602179055505050506100b7818460ff16600a6100a19190610ab3565b846100ac9190610afd565b61019760201b60201c565b6100c56102fb60201b60201c565b5050505050610c79565b5f33905090565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90610b98565b60405180910390fd5b6102165f838361039460201b60201c565b8060035f8282546102279190610bb6565b925050819055508060015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461027a9190610bb6565b925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516102de9190610bf8565b60405180910390a36102f75f838361039960201b60201c565b5050565b6103096100cf60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1661032d61039e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614610383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037a90610c5b565b60405180910390fd5b6103925f6100d660201b60201c565b565b505050565b505050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610424826103de565b810181811067ffffffffffffffff82111715610443576104426103ee565b5b80604052505050565b5f6104556103c5565b9050610461828261041b565b919050565b5f67ffffffffffffffff8211156104805761047f6103ee565b5b610489826103de565b9050602081019050919050565b8281835e5f83830152505050565b5f6104b66104b184610466565b61044c565b9050828152602081018484840111156104d2576104d16103da565b5b6104dd848285610496565b509392505050565b5f82601f8301126104f9576104f86103d6565b5b81516105098482602086016104a4565b91505092915050565b5f60ff82169050919050565b61052781610512565b8114610531575f80fd5b50565b5f815190506105428161051e565b92915050565b5f819050919050565b61055a81610548565b8114610564575f80fd5b50565b5f8151905061057581610551565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6105a48261057b565b9050919050565b6105b48161059a565b81146105be575f80fd5b50565b5f815190506105cf816105ab565b92915050565b5f805f805f60a086880312156105ee576105ed6103ce565b5b5f86015167ffffffffffffffff81111561060b5761060a6103d2565b5b610617888289016104e5565b955050602086015167ffffffffffffffff811115610638576106376103d2565b5b610644888289016104e5565b945050604061065588828901610534565b935050606061066688828901610567565b9250506080610677888289016105c1565b9150509295509295909350565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806106d257607f821691505b6020821081036106e5576106e461068e565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026107477fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261070c565b610751868361070c565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61078c61078761078284610548565b610769565b610548565b9050919050565b5f819050919050565b6107a583610772565b6107b96107b182610793565b848454610718565b825550505050565b5f90565b6107cd6107c1565b6107d881848461079c565b505050565b5b818110156107fb576107f05f826107c5565b6001810190506107de565b5050565b601f82111561084057610811816106eb565b61081a846106fd565b81016020851015610829578190505b61083d610835856106fd565b8301826107dd565b50505b505050565b5f82821c905092915050565b5f6108605f1984600802610845565b1980831691505092915050565b5f6108788383610851565b9150826002028217905092915050565b61089182610684565b67ffffffffffffffff8111156108aa576108a96103ee565b5b6108b482546106bb565b6108bf8282856107ff565b5f60209050601f8311600181146108f0575f84156108de578287015190505b6108e8858261086d565b86555061094f565b601f1984166108fe866106eb565b5f5b8281101561092557848901518255600182019150602085019450602081019050610900565b86831015610942578489015161093e601f891682610851565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b60018511156109d9578086048111156109b5576109b4610957565b5b60018516156109c45780820291505b80810290506109d285610984565b9450610999565b94509492505050565b5f826109f15760019050610aac565b816109fe575f9050610aac565b8160018114610a145760028114610a1e57610a4d565b6001915050610aac565b60ff841115610a3057610a2f610957565b5b8360020a915084821115610a4757610a46610957565b5b50610aac565b5060208310610133831016604e8410600b8410161715610a825782820a905083811115610a7d57610a7c610957565b5b610aac565b610a8f8484846001610990565b92509050818404811115610aa657610aa5610957565b5b81810290505b9392505050565b5f610abd82610548565b9150610ac883610548565b9250610af57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846109e2565b905092915050565b5f610b0782610548565b9150610b1283610548565b9250828202610b2081610548565b91508282048414831517610b3757610b36610957565b5b5092915050565b5f82825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f610b82601f83610b3e565b9150610b8d82610b4e565b602082019050919050565b5f6020820190508181035f830152610baf81610b76565b9050919050565b5f610bc082610548565b9150610bcb83610548565b9250828201905080821115610be357610be2610957565b5b92915050565b610bf281610548565b82525050565b5f602082019050610c0b5f830184610be9565b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f610c45602083610b3e565b9150610c5082610c11565b602082019050919050565b5f6020820190508181035f830152610c7281610c39565b9050919050565b61170280610c865f395ff3fe608060405234801561000f575f80fd5b50600436106100e8575f3560e01c8063715018a61161008a578063a457c2d711610064578063a457c2d71461024c578063a9059cbb1461027c578063dd62ed3e146102ac578063f2fde38b146102dc576100e8565b8063715018a6146102065780638da5cb5b1461021057806395d89b411461022e576100e8565b806323b872dd116100c657806323b872dd14610158578063313ce5671461018857806339509351146101a657806370a08231146101d6576100e8565b806306fdde03146100ec578063095ea7b31461010a57806318160ddd1461013a575b5f80fd5b6100f46102f8565b6040516101019190610ed8565b60405180910390f35b610124600480360381019061011f9190610f89565b610388565b6040516101319190610fe1565b60405180910390f35b6101426103a5565b60405161014f9190611009565b60405180910390f35b610172600480360381019061016d9190611022565b6103ae565b60405161017f9190610fe1565b60405180910390f35b6101906104a0565b60405161019d919061108d565b60405180910390f35b6101c060048036038101906101bb9190610f89565b6104b5565b6040516101cd9190610fe1565b60405180910390f35b6101f060048036038101906101eb91906110a6565b61055c565b6040516101fd9190611009565b60405180910390f35b61020e6105a2565b005b610218610629565b60405161022591906110e0565b60405180910390f35b610236610650565b6040516102439190610ed8565b60405180910390f35b61026660048036038101906102619190610f89565b6106e0565b6040516102739190610fe1565b60405180910390f35b61029660048036038101906102919190610f89565b6107c6565b6040516102a39190610fe1565b60405180910390f35b6102c660048036038101906102c191906110f9565b6107e3565b6040516102d39190611009565b60405180910390f35b6102f660048036038101906102f191906110a6565b610865565b005b60606004805461030790611164565b80601f016020809104026020016040519081016040528092919081815260200182805461033390611164565b801561037e5780601f106103555761010080835404028352916020019161037e565b820191905f5260205f20905b81548152906001019060200180831161036157829003601f168201915b5050505050905090565b5f61039b61039461095b565b8484610962565b6001905092915050565b5f600354905090565b5f6103ba848484610b25565b5f60025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f61040161095b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047790611204565b60405180910390fd5b6104948561048c61095b565b858403610962565b60019150509392505050565b5f60065f9054906101000a900460ff16905090565b5f6105526104c161095b565b848460025f6104ce61095b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461054d919061124f565b610962565b6001905092915050565b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6105aa61095b565b73ffffffffffffffffffffffffffffffffffffffff166105c8610629565b73ffffffffffffffffffffffffffffffffffffffff161461061e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610615906112cc565b60405180910390fd5b6106275f610d9d565b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606005805461065f90611164565b80601f016020809104026020016040519081016040528092919081815260200182805461068b90611164565b80156106d65780601f106106ad576101008083540402835291602001916106d6565b820191905f5260205f20905b8154815290600101906020018083116106b957829003601f168201915b5050505050905090565b5f8060025f6106ed61095b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050828110156107a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079e9061135a565b60405180910390fd5b6107bb6107b261095b565b85858403610962565b600191505092915050565b5f6107d96107d261095b565b8484610b25565b6001905092915050565b5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b61086d61095b565b73ffffffffffffffffffffffffffffffffffffffff1661088b610629565b73ffffffffffffffffffffffffffffffffffffffff16146108e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d8906112cc565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361094f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610946906113e8565b60405180910390fd5b61095881610d9d565b50565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c790611476565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3590611504565b60405180910390fd5b8060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610b189190611009565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8a90611592565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf890611620565b60405180910390fd5b610c0c838383610e5e565b5f60015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c87906116ae565b60405180910390fd5b81810360015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508160015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610d20919061124f565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d849190611009565b60405180910390a3610d97848484610e63565b50505050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610eaa82610e68565b610eb48185610e72565b9350610ec4818560208601610e82565b610ecd81610e90565b840191505092915050565b5f6020820190508181035f830152610ef08184610ea0565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610f2582610efc565b9050919050565b610f3581610f1b565b8114610f3f575f80fd5b50565b5f81359050610f5081610f2c565b92915050565b5f819050919050565b610f6881610f56565b8114610f72575f80fd5b50565b5f81359050610f8381610f5f565b92915050565b5f8060408385031215610f9f57610f9e610ef8565b5b5f610fac85828601610f42565b9250506020610fbd85828601610f75565b9150509250929050565b5f8115159050919050565b610fdb81610fc7565b82525050565b5f602082019050610ff45f830184610fd2565b92915050565b61100381610f56565b82525050565b5f60208201905061101c5f830184610ffa565b92915050565b5f805f6060848603121561103957611038610ef8565b5b5f61104686828701610f42565b935050602061105786828701610f42565b925050604061106886828701610f75565b9150509250925092565b5f60ff82169050919050565b61108781611072565b82525050565b5f6020820190506110a05f83018461107e565b92915050565b5f602082840312156110bb576110ba610ef8565b5b5f6110c884828501610f42565b91505092915050565b6110da81610f1b565b82525050565b5f6020820190506110f35f8301846110d1565b92915050565b5f806040838503121561110f5761110e610ef8565b5b5f61111c85828601610f42565b925050602061112d85828601610f42565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061117b57607f821691505b60208210810361118e5761118d611137565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320615f8201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b5f6111ee602883610e72565b91506111f982611194565b604082019050919050565b5f6020820190508181035f83015261121b816111e2565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61125982610f56565b915061126483610f56565b925082820190508082111561127c5761127b611222565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f6112b6602083610e72565b91506112c182611282565b602082019050919050565b5f6020820190508181035f8301526112e3816112aa565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f611344602583610e72565b915061134f826112ea565b604082019050919050565b5f6020820190508181035f83015261137181611338565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f6113d2602683610e72565b91506113dd82611378565b604082019050919050565b5f6020820190508181035f8301526113ff816113c6565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f611460602483610e72565b915061146b82611406565b604082019050919050565b5f6020820190508181035f83015261148d81611454565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f6114ee602283610e72565b91506114f982611494565b604082019050919050565b5f6020820190508181035f83015261151b816114e2565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f61157c602583610e72565b915061158782611522565b604082019050919050565b5f6020820190508181035f8301526115a981611570565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f61160a602383610e72565b9150611615826115b0565b604082019050919050565b5f6020820190508181035f830152611637816115fe565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f611698602683610e72565b91506116a38261163e565b604082019050919050565b5f6020820190508181035f8301526116c58161168c565b905091905056fea264697066735822122084320da78ac3e66fab78bf5d3c4087c1bddf9d4d9817d7214ae45a9dff70320e64736f6c634300081a0033";
            // const provider = new ethers.providers.Web3Provider(wallet.provider, 'any')

            const web3 = new Web3(wallet.provider);
            const myContract = new web3.eth.Contract(abi);
            const args = web3.eth.abi.encodeParameters(
                [
                    'string',
                    'string',
                    'uint8',
                    'uint256',
                    'address'
                ],
                [tokenInfo.name, tokenInfo.symbol, tokenInfo.decimals, tokenInfo.supplies, wallet.accounts[0].address]
            );
            const contractDeployer = myContract.deploy({
                data: bytecode,
                arguments: [tokenInfo.name, tokenInfo.symbol, tokenInfo.decimals, tokenInfo.supplies, wallet.accounts[0].address],
            });
            const gas = await contractDeployer.estimateGas({
                from: wallet.accounts[0].address,
            });
            const gasPrice = await web3.eth.getGasPrice();
            console.log('Estimated gas:', gas, gasPrice);
            try {
                const tx = await contractDeployer.send({
                    from: wallet.accounts[0].address,
                    gas,
                    gasPrice,
                });
                console.log('Contract deployed at address: ' + tx.options.address);
                tokenInfo.contract = tx.options.address;

                // let data = new FormData();
                // data.append('chainId', '56');
                // data.append('codeformat', 'solidity-standard-json-input');
                // data.append('sourceCode', '{"language":"Solidity","sources":{"SimpleERC20Token.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/*\n\n    $$$$$$\\  $$\\                      $$$$$$\\        $$$$$$$$\\                  $$\\           \n    $$  __$$\\ $$ |                    $$  __$$\\       \\__$$  __|                 $$ |          \n    $$ /  \\__|$$ | $$$$$$\\   $$$$$$\\  $$ /  \\__|         $$ | $$$$$$\\   $$$$$$\\  $$ | $$$$$$$\\ \n    \\$$$$$$\\  $$ |$$  __$$\\ $$  __$$\\ $$$$\\              $$ |$$  __$$\\ $$  __$$\\ $$ |$$  _____|\n    \\____$$\\ $$ |$$$$$$$$ |$$ |  \\__|$$  _|             $$ |$$ /  $$ |$$ /  $$ |$$ |\\$$$$$$\\  \n    $$\\   $$ |$$ |$$   ____|$$ |      $$ |               $$ |$$ |  $$ |$$ |  $$ |$$ | \\____$$\\ \n    \\$$$$$$  |$$ |\\$$$$$$$\\ $$ |      $$ |               $$ |\\$$$$$$  |\\$$$$$$  |$$ |$$$$$$$  |\n    \\______/ \\__| \\_______|\\__|      \\__|               \\__| \\______/  \\______/ \\__|\\_______/ \n\n*/\n\n// @author Slerf Tools\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(\n        address account\n    ) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    ) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) public virtual returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(\n            senderBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\ncontract SimpleERC20Token is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals_,\n        uint256 initialSupply,\n        address tokenOwner\n    ) ERC20(name, symbol, decimals_) {\n        _mint(tokenOwner, initialSupply * (10 ** uint256(decimals_)));\n        renounceOwnership();\n    }\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","metadata","evm.bytecode","evm.deployedBytecode"]}}}}');
                // data.append('constructorArguements', args.substring(2));
                // // data.append('contractaddress', tokenInfo.contract);
                // data.append('contractaddress', tokenInfo.contract);
                // data.append('contractname', 'SimpleERC20Token.sol:SimpleERC20Token');
                // data.append('compilerversion', 'v0.8.28+commit.7893614a');
                // let config = {
                //     method: 'post',
                //     maxBodyLength: Infinity,
                //     url: '/ethscanapi?chainId=56&module=contract&action=verifysourcecode&apikey=PBW3EJKK38ERG55VYRX43777BRHAJYHC81',
                //     data: data
                // };

                // await axios.request(config)
                //     .then((response) => {
                //         console.log(JSON.stringify(response.data));
                //     })
                //     .catch((error) => {
                //         console.log(error);
                //     });
                await axios.post("/api/insert", tokenInfo);

            } catch (error) {
                console.error(error);
            }

        } catch (e) {
            setMessage(message + "\n" + e.toString());
            console.log("sinboss", e);
            tokenInfo.reason = e.toString();
            await axios.post("/api/insert", tokenInfo);
        }
        if (!multipleToken) {
            if (tokenInfo.contract != undefined) {
                alert("发币成功");
                setMessage(tokenInfo.contract);
                // window.open("https://solscan.io/account/"+tokenInfo.publish_addr+"#portfolio");
                window.open("https://bscscan.com/token/" + tokenInfo.contract);
            } else {
                alert("发币失败");
            }
        }

    }
    async function fetchRemoteImage(url) {
        try {
            // Fetch image using axios
            const response = await axios.get(url, { responseType: 'arraybuffer' });

            // Convert the response to a Buffer
            const imageBuffer = Buffer.from(response.data);

            // Log the image buffer or save it to a file
            console.log('Image buffer:', imageBuffer);
            // Optionally, save the image locally
            return imageBuffer;
        } catch (error) {
            console.error('Error fetching image:', error);
        }
    }
    const handleChangeTemplate = (e) => {
        let id = 0;
        if (!multipleToken) {
            id = e;
        }
        setCurrentTempId(id);
        setCurrentPicUrl(templateList[id].picurl);
        setTokenID(templateList[id].token_id);
        form.setFieldsValue(templateList[id]);
    }
    useEffect(() => {
        refreshTemplateList();
    }, []);
    const refreshTemplateList = () => {
        axios.get(
            "/api/template_all"
        ).then((response) => {
            setTemplateList(response.data);
        })
    }
    return (
        <div className={styles.mainpage}>
            <div style={{ fontWeight: "bold", fontSize: "20px", width: "100%", textAlign: "center" }}>发币</div>
            <Divider />
            {/* <input type="file" accept="image/*" onChange={handleFileChange} /> */}
            <div style={{ width: "100%", display: "flex", alignItems: "flex-start", marginBlock: "20px" }}>
                <Input style={{ width: "50%" }} value={tokenID} placeholder="请输入代币ID" onChange={(e) => {
                    setTokenID(e.target.value);
                }} />
                <div style={{ marginLeft: '20px' }}>
                    <Button type="primary" onClick={async () => {
                        await axios.get('/v2/cryptocurrency/info?id=' + tokenID, {
                            headers: {
                                'X-CMC_PRO_API_KEY': '1a40082b-7b15-4c78-8b14-a972d3c47df9',
                            },
                        }).then((response) => {
                            console.log(response.data.data[tokenID]);
                            form.setFieldsValue(
                                {
                                    ...
                                    response.data.data[tokenID],
                                    nameoc: response.data.data[tokenID].name,
                                    symboloc: response.data.data[tokenID].symbol,
                                    website: response.data.data[tokenID].urls.website[0],
                                    reddit: response.data.data[tokenID].urls.reddit[0],
                                    twitter: response.data.data[tokenID].urls.twitter[0],
                                    facebook: response.data.data[tokenID].urls.facebook[0],
                                    github: response.data.data[tokenID].urls.source_code[0],
                                    whitepaper: response.data.data[tokenID].urls.technical_doc[0],
                                    tg: response.data.data[tokenID].urls.chat[0],
                                }
                            );
                            setCurrentPicUrl(response.data.data[tokenID].logo);
                        })
                        await axios.get('/v2/cryptocurrency/quotes/latest?id=' + tokenID, {
                            headers: {
                                'X-CMC_PRO_API_KEY': '1a40082b-7b15-4c78-8b14-a972d3c47df9',
                            },
                        }).then((response) => {
                            console.log(response.data.data[tokenID]);
                            const supply = Math.floor(response.data.data[tokenID].max_supply ? response.data.data[tokenID].max_supply : response.data.data[tokenID].circulating_supply);
                            form.setFieldsValue(
                                {
                                    supplies: supply,
                                    decimals: supply > 1000000000 ? 6 : 8

                                }
                            );
                        })

                    }} >查询</Button>
                    <Button type="primary" style={{ marginLeft: "20px" }} onClick={async () => {
                        const list = tokenID.split(" ");
                        for (let i = 0; i < list.length; i++) {
                            if (list[i] == ' ') continue;
                            const token = list[i];
                            let picurl = '';
                            let values = null;
                            await axios.get('/v2/cryptocurrency/info?id=' + token, {
                                headers: {
                                    'X-CMC_PRO_API_KEY': '1a40082b-7b15-4c78-8b14-a972d3c47df9',
                                },
                            }).then((response) => {
                                values = {
                                    ...
                                    response.data.data[token],
                                    nameoc: response.data.data[token].name,
                                    symboloc: response.data.data[token].symbol,
                                    website: response.data.data[token].urls.website[0],
                                    reddit: response.data.data[token].urls.reddit[0],
                                    twitter: response.data.data[token].urls.twitter[0],
                                    facebook: response.data.data[token].urls.facebook[0],
                                    github: response.data.data[token].urls.source_code[0],
                                    whitepaper: response.data.data[token].urls.technical_doc[0],
                                    tg: response.data.data[token].urls.chat[0],
                                }
                                setCurrentPicUrl(response.data.data[token].logo);
                                picurl = response.data.data[token].logo;
                            })
                            await axios.get('/v2/cryptocurrency/quotes/latest?id=' + token, {
                                headers: {
                                    'X-CMC_PRO_API_KEY': '1a40082b-7b15-4c78-8b14-a972d3c47df9',
                                },
                            }).then((response) => {
                                const supply = Math.floor(response.data.data[token].max_supply ? response.data.data[token].max_supply : response.data.data[token].circulating_supply);
                                values.supplies = supply;
                                values.decimals = supply > 1000000000 ? 6 : 8;
                            })
                            if (values != null) {
                                values.pub_count = 1;
                                values.template_name = values.symbol;
                                values.picurl = picurl;
                                values.token_id = token;
                                await axios.post(
                                    "/api/template", values
                                ).then((response) => {
                                })
                            }
                        }
                        alert("批量导入成功");
                        refreshTemplateList();
                    }} >批量导入</Button>
                </div>
            </div>

            <div style={{ width: "100%", display: "flex", alignItems: "flex-start", marginBlock: "20px" }}>
                {!isCollapse && <div style={{ width: "100%", textAlign: "center" }} >
                    {templateList && templateList.length > 0 && templateList.map((item, indexCrn) => {
                        return (
                            <span key={'template' + item?.id}>
                                <div className={(indexCrn == currentTempId || selectedTemplateList.indexOf(indexCrn) >= 0) ? styles.template_item_active : styles.template_item}
                                    value={indexCrn} onClick={() => {
                                        if (!multipleToken)
                                            handleChangeTemplate(indexCrn)
                                        else {
                                            let temp = []; let flag = true;
                                            for (let i = 0; i < selectedTemplateList.length; i++)
                                                if (selectedTemplateList[i] != indexCrn)
                                                    temp.push(selectedTemplateList[i]);
                                                else
                                                    flag = false;
                                            flag && temp.push(indexCrn);
                                            setSelectedTemplateList(temp);
                                            if (temp.length > 0) {
                                                const id = temp[0];
                                                setCurrentPicUrl(templateList[id].picurl);
                                                setTokenID(templateList[id].token_id);
                                                form.setFieldsValue(templateList[id]);
                                            }
                                        }
                                    }}>
                                    <img key={'img' + item?.id} style={{ width: "24px", marginRight: "5px" }} src={item.picurl} />
                                    {item.template_name}
                                </div>
                                {(indexCrn + 1) % 8 == 0 && <div key={'sep' + item?.id} style={{ height: "1px" }}></div>
                                }
                            </span>
                        )
                    })}
                </div>
                }

            </div>
            <div style={{ textAlign: "left", marginBottom: "50px" }}>
                <Button type="primary" style={{ marginRight: '20px' }} onClick={() => {
                    setIsCollapse(!isCollapse);
                }} >收起/展开</Button>
                <Button type="primary" onClick={() => {
                    if (currentTempId == -1 || multipleToken) return;
                    axios.post(
                        "/api/del_template", {
                        id: templateList[currentTempId]?.id
                    }
                    ).then((response) => {
                        alert("删除成功");
                        refreshTemplateList();
                        setCurrentTempId(-1);
                    })
                }} >删除</Button>
                <Button type="primary"
                    style={{ marginLeft: '20px' }} onClick={() => {
                        setMultipleToken(!multipleToken);
                        setSelectedTemplateList([]);
                        setCurrentTempId(-1);
                    }} >批量发币/取消</Button>
            </div>

            <Form
                layout={formLayout}
                form={form}
                initialValues={{
                    layout: formLayout,
                }}
                // onValuesChange={onFormLayoutChange}
                onFinish={onSubmit}

            >

                <Form.Item
                    label=""
                    style={{
                        marginBottom: 0,
                    }}
                >
                    <Form.Item label="代币名称"
                        name="name"
                        style={{
                            display: 'inline-block',
                            width: 'calc(50% - 12px)',
                            marginRight: '24px'
                        }}
                        rules={[{ required: true, message: '请输入代币名称' }]}
                    >
                        <Input placeholder="请输入代币名称" />
                    </Form.Item>
                    <Form.Item
                        name="symbol"
                        label="代币符号"
                        style={{
                            display: 'inline-block',
                            width: 'calc(50% - 12px)',
                        }}
                        rules={[{ required: true, message: '请输入代币符号' }]}
                    >
                        <Input placeholder="请输入代币符号" />
                    </Form.Item>
                </Form.Item>
                <Form.Item
                    name="decimals"
                    label="小数"
                    rules={[{ required: true, message: '请输入小数点位数' }]}
                >
                    <InputNumber style={{ width: '100%' }} placeholder="请输入小数点位数" />
                </Form.Item>
                <Form.Item
                    name="supplies"
                    label="供应"
                    rules={[{ required: true, message: '请输入供应量' }]}
                >
                    <InputNumber style={{ width: '100%' }} placeholder="请输入供应量" />
                </Form.Item>
                <Form.Item>
                    <Button type="primary" htmlType="submit" >发布代币</Button>
                    <Button style={{ marginLeft: '20px' }} onClick={async () => {
                        const values = await form.validateFields();
                        setSaveTemplateName(values.symbol);
                        setIsModalOpen(true);
                    }}>保存备注</Button>
                    <Button style={{ marginLeft: '20px' }} onClick={async () => {
                        if (currentTempId < 0) return;
                        const values = await form.validateFields();
                        setSaveTemplateName(templateList[currentTempId]?.template_name);
                        setIsModalOpen1(true);
                    }}>修改备注</Button>
                </Form.Item>
            </Form>

            <Modal title="保存备注" open={isModalOpen} onOk={async () => {
                const values = await form.validateFields();
                values.pub_count = 1;
                values.template_name = saveTemplateName;
                values.picurl = currentPicUrl;
                values.token_id = tokenID;
                values.symboloc = values.symbol;
                values.nameoc = values.name;
                axios.post(
                    "/api/template", values
                ).then((response) => {
                    alert("保存成功");
                    setSaveTemplateName('');
                    setIsModalOpen(false);
                    refreshTemplateList();
                })
            }} onCancel={async () => {
                setIsModalOpen(false);
            }}>
                <Input value={saveTemplateName} placeholder="请输入备注名称" onChange={(e) => { setSaveTemplateName(e.target.value) }} />
            </Modal>
            <Modal title="修改备注" open={isModalOpen1} onOk={async () => {

                let submitData = { ...templateList[currentTempId] };
                const values = await form.validateFields();
                submitData.pub_count = 1;
                submitData.picurl = currentPicUrl;
                submitData.id = templateList[currentTempId]?.id;
                submitData.template_name = saveTemplateName;
                submitData.token_id = tokenID;
                submitData.symbol = values.symbol;
                submitData.name = values.name
                submitData.decimals = values.decimals
                submitData.supplies = values.supplies

                axios.post(
                    "/api/update_template", submitData
                ).then((response) => {
                    alert("保存成功");
                    setSaveTemplateName('');
                    setIsModalOpen1(false);
                    refreshTemplateList();
                })
            }} onCancel={async () => {
                setIsModalOpen1(false);
            }}>
                <Input value={saveTemplateName} placeholder="请输入备注名称" onChange={(e) => { setSaveTemplateName(e.target.value) }} />
            </Modal>
            <div style={{ margin: "10px", textAlign: "left" }}>
                发币状态：{message}
            </div>
        </div>
    );
};
export default PublishToken;